@model List<DLDA.GUI.DTOs.StaffComparisonRowDto>
@using System.Text.Json

@{
    ViewData["Title"] = "Jämförelse av skattningar";

    var match = Model.Where(m => m.Classification == "match").ToList();
    var mild = Model.Where(m => m.Classification == "mild-diff").ToList();
    var strong = Model.Where(m => m.Classification == "strong-diff").ToList();
    var skipped = Model.Where(m => m.Classification == "skipped" || m.Classification == "staff-skipped").ToList();
    var flagged = Model.Where(m => !string.IsNullOrWhiteSpace(m.Comment)).ToList();

    var labelsJson = JsonSerializer.Serialize(new[] { "❗ Stor skillnad", "⚠ Mindre skillnad", "✅ Match", "🛑 Obesvarad" });
    var valuesJson = JsonSerializer.Serialize(new[] { strong.Count, mild.Count, match.Count, skipped.Count });
}

<div class="container mt-5">
    <h2 class="mb-4">📊 Jämförelse av skattningar mellan patient och personal</h2>

    <div class="row mt-4">
        <div class="col-md-6">
            <canvas id="comparisonPie"></canvas>
        </div>
        <div class="col-md-6">
            <h5 class="mb-3">📝 Återkoppling</h5>
            <ul>
                <li>💄 Totalt jämförda frågor: <strong>@Model.Count</strong></li>
                <li>✅ Överensstämmer: <strong>@match.Count</strong></li>
                <li>⚠ Mindre skillnad (±1): <strong>@mild.Count</strong></li>
                <li>❗ Större skillnad (≥2): <strong>@strong.Count</strong></li>
                <li>🛑 Obesvarade: <strong>@skipped.Count</strong></li>
                <li>🚩 Flaggade: <strong>@flagged.Count</strong></li>
            </ul>

            @if (strong.Count >= 1)
            {
                <div class="alert alert-warning">
                    Det finns <strong>@strong.Count</strong> frågor med större skillnader i skattning mellan patient och personal.
                </div>
            }

            <div class="row">
                <div class="col-md-6">
                    <div class="card border-success shadow-sm">
                        <div class="card-header bg-success text-white">
                            ✅ Kategorier med mest överensstämmelse
                        </div>
                        <div class="card-body">
                            <ul>
                                @foreach (var group in match.GroupBy(m => m.Category).OrderByDescending(g => g.Count()).Take(5))
                                {
                                    <li><strong>@group.Key</strong>: @group.Count() frågor</li>
                                }
                            </ul>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="card border-danger shadow-sm">
                        <div class="card-header bg-danger text-white">
                            ❗ Kategorier med störst skillnader
                        </div>
                        <div class="card-body">
                            <ul>
                                @foreach (var group in strong.GroupBy(m => m.Category).OrderByDescending(g => g.Count()).Take(5))
                                {
                                    <li><strong>@group.Key</strong>: @group.Count() frågor</li>
                                }
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- 📂 DropDown-tabeller för varje klassificering -->
    @foreach (var (title, icon, list, color) in new[] {
        ("❗ Stor skillnad", "danger", strong, "danger"),
        ("⚠ Mindre skillnad", "warning", mild, "warning"),
        ("✅ Match", "success", match, "success"),
        ("🛑 Obesvarad", "secondary", skipped, "secondary")
        })
    {
        var collapseId = title.Replace(" ", "_");
        <div class="card border-@color mt-4 shadow-sm">
            <div class="card-header bg-@color text-white d-flex justify-content-between align-items-center">
                <span>@title</span>
                <button class="btn btn-sm btn-light" type="button" data-bs-toggle="collapse" data-bs-target="#@collapseId">
                    Visa/dölj
                </button>
            </div>
            <div id="@collapseId" class="collapse">
                <div class="card-body p-0">
                    <table class="table table-bordered mb-0">
                        <thead class="table-light">
                            <tr>
                                <th>Nr</th>
                                <th>Fråga</th>
                                <th>Kategori</th>
                                <th>🧑 Patient</th>
                                <th>👩‍🎓 Personal</th>
                                <th>Skillnad</th>
                                <th>Kommentar</th>
                                <th>Flagga</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var row in list
                                                    .OrderByDescending(r =>
                                                    Math.Max(
                                                    int.TryParse(r.PatientAnswer, out var p) ? p : 0,
                                                    int.TryParse(r.StaffAnswer, out var s) ? s : 0))
                                                    .ThenByDescending(r =>
                                                    r.Classification == "strong-diff" ? 3 :
                                                    r.Classification == "mild-diff" ? 2 : 1))
                            {
                                var label = row.Classification switch
                                {
                                    "strong-diff" => "❗ Stor skillnad",
                                    "mild-diff" => "⚠ Mindre skillnad",
                                    "match" => "✅ Match",
                                    _ => "🛑 Obesvarad"
                                };

                                <tr class="table-@color">
                                    <td>@row.QuestionNumber</td>
                                    <td>@row.QuestionText</td>
                                    <td>@row.Category</td>
                                    <td>@(string.IsNullOrWhiteSpace(row.PatientAnswer) ? "-" : row.PatientAnswer)</td>
                                    <td>@(string.IsNullOrWhiteSpace(row.StaffAnswer) ? "-" : row.StaffAnswer)</td>
                                    <td>@label</td>
                                    <td>@(string.IsNullOrWhiteSpace(row.Comment) ? "-" : row.Comment)</td>
                                    <td>@(string.IsNullOrWhiteSpace(row.Comment) ? "" : "🚩")</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }

    <a class="btn btn-secondary mt-4"
       asp-controller="StaffAssessment"
       asp-action="Assessments"
       asp-route-userId="@ViewBag.UserId">
        ⬅ Tillbaka till bedömningar
    </a>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>
    <script>
        const ctx = document.getElementById('comparisonPie');
        const labels = @Html.Raw(labelsJson);
        const data = @Html.Raw(valuesJson);

        new Chart(ctx, {
            type: 'pie',
            data: {
                labels: labels,
                datasets: [{
                    data: data,
                    backgroundColor: ['#dc3545', '#ffc107', '#198754', '#adb5bd'],
                    borderWidth: 1
                }]
            },
            options: {
                plugins: {
                    legend: { position: 'bottom' },
                    tooltip: {
                        callbacks: {
                            label: function (ctx) {
                                const label = ctx.label || '';
                                const value = ctx.parsed || 0;
                                return `${label}: ${value} frågor`;
                            }
                        }
                    },
                    datalabels: {
                        color: '#000',
                        font: {
                            weight: 'bold',
                            size: 16
                        },
                        formatter: (value, ctx) => {
                            const total = ctx.chart.data.datasets[0].data.reduce((a, b) => a + b, 0);
                            if (total === 0 || value === 0) return '';
                            const percent = Math.round((value / total) * 100);
                            return `${percent}%`;
                        }
                    }
                }
            },
            plugins: [ChartDataLabels]
        });
    </script>
}

